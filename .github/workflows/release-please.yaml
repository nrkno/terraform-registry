# SPDX-FileCopyrightText: 2022 - 2024 NRK
#
# SPDX-License-Identifier: MIT
on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

name: Release
jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: googleapis/release-please-action@v4.4.0
        id: release-please
        with:
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json
    outputs:
      release_created: ${{ steps.release-please.outputs.release_created }}
      tag_name: ${{ steps.release-please.outputs.tag_name }}

  build-binaries:
    name: Build and push binaries
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.release_created
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
        os:
          - linux
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
        with:
          ref: ${{ needs.release-please.outputs.tag_name }}
      - name: Setup Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version-file: "go.mod"
      - name: Build and upload
        env:
          GH_TOKEN: ${{ github.token }}
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          VERSION: ${{ needs.release-please.outputs.tag_name }}
        run: |
          LD_FLAGS=""
          LD_FLAGS+=" -s" # no debug symbols
          LD_FLAGS+=" -w" # no DWARF debug info
          LD_FLAGS+=" -X 'main.buildDate=$(date --utc +%Y-%m-%dT%H:%M:%SZ)'"
          LD_FLAGS+=" -X 'main.version=${VERSION}'"
          ARCHIVE_NAME="terraform-registry_${VERSION}_${GOOS}_${GOARCH}.tar.gz"

          make LD_FLAGS="${LD_FLAGS}" build
          tar -cvzf "${ARCHIVE_NAME}" terraform-registry
          gh release upload ${VERSION} "${ARCHIVE_NAME}"

  build-containers:
    name: Build and push container
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write
      issues: write
      pull-requests: write
    needs: release-please
    if: needs.release-please.outputs.release_created
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
      - name: Get git tags as image tags
        id: tags
        run: |
          TAGS=$(git tag --points-at HEAD | sed "s|^|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:|" | xargs | sed 's/ /,/g')
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ steps.tags.outputs.tags }}
